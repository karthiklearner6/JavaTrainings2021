/*

1)try:  A try is a block, in which we can specify a group of statements
 that may generate an exception.
Syntax:
try   {
       statements generating exception;
}
A try block can contain any number of statements but recommended 
to specify only those statements which may generate the exception.


2)Catch: The catch block is used to handle the exception.
 It must be preceeded by try block which means, 
 we cant use catch block alone. It can be followed by finally block.
Syntax:
catch(AnyException ref)   {
       statements displaying exception information;
}
Note:  Every catch block must contain a reference of any one of the exception.

3)finally : The finally block is used to execute the important code of the program.It is executed wether an exception is handled or not.

4)throw: The throw keyword is used to throw an exception.

5)throws: The throws keyword is used to declare exceptions. It doesnâ€™t throw an exception. It specifies that there may occur an exception in the method. It is always used with method signature.

*/


/*

public class ExceptionHandlingDemo1
{  
	  public static void main(String args[])
	  {  
	  
		  Scanner myObj = new Scanner(System.in);
		  
		  System.out.println("enter 2 values");
		  
		  
		  int variable1 = myObj.nextInt();
		  int variable2 = myObj.nextInt();
	      int output;
	      
	      output=variable1/variable2;
		  
		  System.out.println(output);
		  
	      System.out.println("Important Data");
	   
	  }  
	}  

*/

/*

public class ExceptionHandlingDemo1
{  
	  public static void main(String args[])
	  {  
	    Scanner myObj = new Scanner(System.in);
		  
		  System.out.println("enter 2 values");
		  
		  int variable1 = myObj.nextInt();
		  int variable2 = myObj.nextInt();
	      int output;
	      
	      try {											
	      										 //code that may raise exception
			output=variable1/variable2;
			 System.out.println(output);
		}
		
	    
		  catch(ArithmeticException e)
	   {
		   System.out.println("dont divide with zero");
	   }  
	      catch(InputMismatchException t)
	      {
	    	  System.out.println("dont write characters");
	      }
	      
	      catch (Exception e)
	      {
			// TODO Auto-generated catch block  --->First select the code which you want rytclick sourroundwith ---> Can use predefault template
			e.printStackTrace();
		}
		  
		 System.out.println("Important Data");
	   
	  }  
	}  



*/




================================================


import java.util.IllegalFormatConversionException;


import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.UnknownFormatConversionException;
import java.util.UnknownFormatFlagsException;



/*

//ArrayIndexOutOfBoundsException
public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    {  
        try  
        {                                       
        int arr[]= {1,2,3,4,5,6,7,8,9,10};  
        System.out.println("The index value of 2 is  "+arr[2]); 
        System.out.println("The index value of 25 is  "+arr[25]);              //riskycode will be written in try block   
        }  
              
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("rest of the code");  
    }  
      
}  

*/


/*

public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    {  
    	
    	String s="omkars computer education";
    	
        try  
        {                                       
        System.out.println("The char at index 35 is "+s.charAt(35));
        }  
              
        catch(StringIndexOutOfBoundsException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("rest of the code");  
    }  
      
} 

*/



/*

//InputMismatchException

public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    { 
    	Scanner sc=new Scanner(System.in);
    	int p,q,r;
    	System.out.println("enter values of p,q");
        try  
        {                                       
        	p=sc.nextInt();            // if we give other than integer(if we give float, it risies exception
        	q=sc.nextInt();
        	r=p/q;
        	System.out.println(" The results is "+r);
        }  
              
        catch(InputMismatchException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("rest of the code");  
    }  
      
}  
*/




/*

//NumberFormatException

public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    { 
    	Scanner sc=new Scanner(System.in);
    	int p;
    	String q="karthik";
    	System.out.println("enter values of p,q");
        try  
        {                                       
        	p=sc.nextInt();            
        	int n=Integer.parseInt(q);   //converting a string to an int value
        int	r=p+n;                                  
        	System.out.println(" The results is "+r);
        }  
              
        catch(NumberFormatException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("rest of the code");  
    }  
      
} 


*/


/*

//UnknownFormatConversionException
public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    { 
    	Scanner sc=new Scanner(System.in);
    	long r = 40;
    	
        try  
        {                                       
        	
        	System.out.printf(" The results is  %ld",r);
        }  
              
        catch(UnknownFormatConversionException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("rest of the code");  
    }  
      
}  

*/




/*
IllegalFormatConversionException

public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    { 
    	int r = 40;
    	
        try  
        {                                       
        	
        	System.out.printf(" The results is  %f",r);
        }  
              
        catch(IllegalFormatConversionException e)  
        {  
            System.out.println(e);  
        }  
        
        catch(Exception ae)
        {
        	System.out.println(ae);
        }
        System.out.println("rest of the code");  
    }  
      
}  




*/


/*

//NegativeArraySizeException

public class ExceptionHandlingDemo2 
{  
	  
    public static void main(String[] args) 
    {
    	try {
    		int a[]=new int[-7];
    	}
    	catch(NegativeArraySizeException nase)
    	{
    		System.out.println(nase);
    	}
    	
    	System.out.println("rest of the code");
    }

    }

*/





import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class ExceptionHandlingDemo2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try
		{
		BufferedReader br=new BufferedReader(new FileReader("ExceptionHandlingDemo1.java"));
	}
//		catch(IOException e)
//		{
//			System.out.println(e);
//		}

		catch(Exception i)
		{
			System.out.println(i);
		}
		
}
}






==================================================================================





import java.util.InputMismatchException;


import java.util.Scanner;

/*
Java catch multiple exceptions

Java Multi-catch block
A try block can be followed by one or more catch blocks. Each catch block must contain a different exception handler.
So, if you have to perform different tasks at the occurrence of different exceptions, use java multi-catch block.

Important Points:
At a time only one exception occurs and at a time only one catch block is executed.
All catch blocks must be ordered from most specific to most general, 
i.e. catch for ArithmeticException must come before catch for Exception.

*/


/*

class ExceptionHandlingDemo3
{
	public static void main(String[] args) 
	{
		int p,q,r;
		Scanner sc=new Scanner(System.in);
		System.out.println("enter values of a,b");
		
		try
		{
			p=sc.nextInt();
			q=sc.nextInt();
			
			r=p/q;
			System.out.println("o/p is "+r);
			
		}
		catch(ArithmeticException ae) {
			System.out.println(ae);
		}
		catch(InputMismatchException ie)
		{
			System.out.println(ie);
			System.out.println("you entered character plz dont do that");
		}
		
		catch(Exception e)
		{
			System.out.println(e);
		}
		
		System.out.println("This is the final code");
		
	}
}

*/



/*

public class ExceptionHandlingDemo3 {  
	  
    public static void main(String[] args) {  
          
           try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
           
           	catch(NullPointerException npe)
          {
           		System.out.println("Null Pointer Exception");
           }
               catch(Exception e)  
                  {  
                   System.out.println(e);  
                  }             
               System.out.println("rest of the code");    
    }  
}  


*/

/*

public class ExceptionHandlingDemo3 {  
	  
    public static void main(String[] args) {  
          
           try{    
                int a[]=new int[5];    //here we are giving 5 values capability
                 
                System.out.println(a[10]);   //here we are trying to access 10th index value, it doesn't possible so it rises exception  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(Exception e)  
                  {  
                   System.out.println("Parent Exception occurs");  
                  }             
               System.out.println("rest of the code");    
    }  
}  



*/




public class ExceptionHandlingDemo3 {  
	  
    public static void main(String[] args) {  
          
           try{    
                int a[]=new int[5];    
                a[56]=9390/0;    
                System.out.println(a[10]);  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(Exception e)  
                  {  
                   System.out.println("Parent Exception occurs");  
                  }             
               System.out.println("rest of the code");    
    }  
}  




==================================================================================



/*

Java Nested try block
The try block within a try block is known as nested try block in java.

Why use nested try block
Sometimes a situation may arise where a part of a block may
 cause one error and the entire block itself may cause another error. In such cases, exception handlers have to be nested.

Syntax:

try  
{  
    statement 1;  
    statement 2;  
    try  
    {  
        statement 1;  
        statement 2;  
    }  
    catch(Exception e)  
    {  
    }  
}  
catch(Exception e)  
{  
}  


*/



/*

class ExceptionHandlingDemo4{  
	 public static void main(String args[]){  
	  try
	  {  
	    try
	    {  
	     System.out.println("first divide");  
	     int b =39/0;  
	    }
	    catch(ArithmeticException e)
	    {
	    	System.out.println(e);
	    }  
	   
	    try
	    {  
	    int a[]=new int[5];  
	    a[5]=4;  
	    }
	    catch(ArrayIndexOutOfBoundsException e)
	    {
	    	System.out.println(e);
	    }  
	     
	    System.out.println(" Out of try catch block ");  
	  }
	  catch(Exception e)
	  {
		  System.out.println(" parent Exception");
		  }  
	  
	  System.out.println("Lastt line");  
	 }  
	}  

*/


========================================================================================


import java.util.Scanner;

/*

Java finally block
Java finally block is a block that is used to execute important 
code such as closing connection.

Java finally block is always executed whether exception is handled or not.

Java finally block follows try or catch block.

*/


/*


public class ExceptionHandlingDemo5
{  
	  public static void main(String args[])
	  {  
	    Scanner myObj = new Scanner(System.in);
		  
		  System.out.println("enter 2 values");
		  
		  int variable1 = myObj.nextInt();
		  int variable2 = myObj.nextInt();
	      int output;
	      
	      try {											
	      										 //code that may raise exception
			output=variable1/variable2;
			 System.out.println(output);
		}
		
		  catch(ArithmeticException e)
	   {
		   System.out.println(e);
	   }  
	      catch (Exception e)
	      {
			
			e.printStackTrace();
		}
	      finally
	      {
	    	  System.out.println("finally block is always executed whether exception is handled or not");
	    	  }  
	      System.out.println("rest of the code...");  
		 
	   
	  }  
	}  


*/

=============================================================================





/*

Java throw keyword
The Java throw keyword is used to explicitly throw an exception.

We can throw either checked or uncheked exception in java by throw keyword. 
The throw keyword is mainly used to throw custom exception.
 

syntax : throw exception-name;


*/


/*

public class ExceptionHandlingDemo6
{  
	   static void validation(int marks)
	   {  
	     if(marks<35)  
	      throw new IndexOutOfBoundsException("Fail");    //here we can write any excepition ArrayIndex/Arithmetic.... 
	     else  
	      System.out.println("Your pass");  
	   }  
	   public static void main(String args[])
	   {  
	      validation(3);  
	      System.out.println("Last linesss...");  
	  }  
	}  

*/



=====================================================


/*

Java throws keyword
The Java throws keyword is used to declare an exception. 
It gives an information to the programmer that there may occur an exception 
so it is better for the programmer to provide the exception handling code so that normal flow can be maintained.

Exception Handling is mainly used to handle the checked exceptions. If there occurs any unchecked exception such as NullPointerException, it is programmers fault that he is not performing check up before the code being used.

Syntax of java throws
returntype  method-name() throws exception_class_name{  
//method code  
}  


*/






class ExceptionHandlingDemo7  
{ 
    public static void main(String[] args)  //throws InterruptedException 
    { 
        Thread.sleep(10000); 
        System.out.println("Welcome to omkars"); 
    } 
} 
















