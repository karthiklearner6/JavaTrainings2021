ABSTRACT CLASSES 


➢ What is an Abstract Class? 

• There	are	two	types	of	classes	Abstract	class	and	Concrete	class		

• If	abstract	keyword	is	used	before	the	class	then	it	is	an	Abstract	
Class	if	nothing	is	written	before	class	then	it	is	a	Concrete	class

• Object	of	an	Abstract	class	cannot	be	created	but	object	of	Concrete	
class	can	be	created

• reference	of	abstract	class	is	allowed



rules:

• Method	which	is	not	having	a	body	is	known	as	Abstract	method,	
the	method	must	be	declared	as	abstract	(if any one method is writtened as abstract then we should write abstract keyword before the class )	
• The	abstract	method	is	undefined	method	(which is not having a body) - so class is not completely defined, when ever class is not completely defined we cant create an object.
• A	class	is	Abstract	class	if	at	least	one	of	the		methods	is	abstract	
• If	any	other	class	inherits	abstract	class	then	that	class	also	becomes	
abstract	class	but	to	become	a	concrete	class	the	subclass	must	
override	the	undefined	method	
• A	class	becomes	useful	if	it	overrides	all	the	methods	of	abstract	class	
• Abstract	classes	are	used	for	imposing	standards	and	sharing	
methods	
• Sub	classes	are	meant	for	following	standards


Do's & Donts of abstract class:

-> abstract classes cannot be final
ex: 

abstract final class Super  // Error (Because final is a keyword, If a class is final that cannot be extended, so we cant inherit abstract final class, so its not valid & error). -> abstract classes are meant for inheritance only, if it is final it cannot be extended. 
{
abstract public void meth1();
}
public class AbstractRules
{
public static void main(String args[])
{

}
}


-> We cannot make abstract method as final 


abstract class Super  
{
abstract final public void meth1()  // abstract methods are meant for overriding, (actually abstract methods are meant for overriding only, so we should not write final keyword in abstract methods).
}


->Error - we shouldnot/cannot make abstract classes as static

abstract static class Super  // Error 
{
abstract public void meth1();
}



->Error - we shouldnot/cannot make abstract methods as static

abstract  class Super  
{
abstract static public void meth1();   // Error (becz static method means it must have its own body, we can call it without object, just by using a class name...
}



-> If a subclass is there, inheritng from abstract class it must override abstract methods, otherwise subclas becomes also the abstract class. 


//-------------------------------------

//example -1:


class normal
{ 
 
public normal()                              //constructor
 { 
 System.out.println("Super"); 
 } 
 
public void meth1()                         //concrete method
 { 
 System.out.println("meth1"); 
 } 
}

class test 
{ 
 public static void main(String args[]) 
 { 
normal s=new normal();   // now the instantiation/object creation is possible
s.meth1();                 
} 
}


//---------------------------------------

example - 2 : when ever we keep an keyword of abstract before the class (or) when ever we have any method as abstract that class cannot be created an object.
// Error - normal class is an abstract; cannot be instantiated(object creation is not possible)

abstract class normal
{ 
 
public normal()                              //constructor
 { 
 System.out.println("Super"); 
 } 
 
public void meth1()                         //concrete method
 { 
 System.out.println("meth1"); 
 } 
}

class test 
{ 
 public static void main(String args[]) 
 { 
normal s=new normal();                      // we cannot create an object, cant create instantiation...
s.meth1();                 
} 
}


//------------------------------
Example 3 :- 



// error: normal is not abstract and does not override abstract method metho1() in normal


class normal               //error - class must also be declared as abstract because, in a class one abstract method is there.
{ 
 
public normal()                              
 { 
 System.out.println("Super"); 
 } 
 
public void meth1()                         
 { 
 System.out.println("meth1"); 
 } 
abstract public void metho1();         //even a class is having a single method as abstract, we should declare class as abstract if we didnt mentioned error 

}

class test 
{ 
 public static void main(String args[]) 
 { 
normal s;                     // when we declare abstract before class , for abstract we cant create instantiation, but we can create a reference...   
               
} 
}


//-----------------------------------------------

ex:- 4


//super abstract class 

abstract class Super 
{ 
 
public Super()                              //constructor
 { 
 System.out.println("Super"); 
 } 
 
public void meth1()                         //concrete method
 { 
 System.out.println("meth1"); 
 } 
 
 abstract void meeth2();              //abstract method       

} 


class sub extends Super   
{ 
 void meeth2()               
 { 
 System.out.println("meeth2"); 
 } 
} 

class test 
{ 
 public static void main(String args[]) 
 { 
 Super s1;                              // reference of abstract is allowed (but abstract class objects cannot be created / instantiated).
sub s2 =new sub();                         //when ever it is concrete then object can be created
 
 Super s=new sub();		// we can take super class as reference and object of sub class 
 s.meth1();
 s.meeth2();
 
 } 
}



// where & when we are using this abstract classes - when ever any method is not defined then we will use if that method declaration / development is developed by another class then we will use abstract class/abstract methods.

//-------------------------------------------------


// these are the realtime examples these standerds can be imposed, in real life of the 

Example with Explaination : 

The Govt will give Standards to Open a Hospital
1) emergency
2) appointment
3) admit
4) billing
5) security
6) parking


so we will write like this -  These are all for imposing Standards by Govt

abstract class Hospital
{
abstract void emergency();
abstract void appointment();
abstract void admit();
abstract void billing();
abstract void security();
abstract void parking();
}

// we are opening a real time hospital we must make concrete class, so we have to override all these methods in concrete class. If we dont override then MyHospital(will also become abstract)
// These are for following standards

class MyHospital extends hospital
{

MyHospital()
{
}
void emergency()
{
}
void appointment()
{
}
void admit()
{
}
void billing()
{
}
void security()
{
}
void parking()
{
}

}




Note : 

1) The body which gives the standards, they wont have the hospital, they are meant for only giving standards. If the private person is opening a new hospital they should follow the standards.
 1.1) Like that abstact class cant create there own object.But can create reference like(Superclasse ref=new Subclass();). Super class refernce can hold the subclass object.

2) We can create the object for only subclass. ( subclassname ref=new subclassname(); )

//------------------------------

Real Time Example 2:

KFC Franchise
------------

abstract class KFC
{
KFC()   // concrete constructor
{
}
void howToMakeItem()  // concrete methods, In abstract class concrete methods can be there, KFC will say the procedure to folow those steps for making item
{
}
abstract void Billing();    // Billing is our own risk & intrest
abstract void Offer();       // Offers is depends on the franchiser who takes it.
}



class MyKFC extends KFC
{

KFC()   // concrete constructor
{
}
void howToMakeItem()  // concrete methods, In abstract class concrete methods can be there, KFC will say the procedure to folow those steps for making item( overriding the methods then only it converts into concrete methods from abstract)
{
}

void Billing()   // these are declared & we are making concrete methods, by extending into concrete class and we are defining the methods ( overriding the methods then only it converts into concrete methods from abstract, then it wil convert into concrete class) 
{

}
void Offer()
{

}
}



Note: 
1) The abstract class cannot be create any object. we can create an object of concrete class.
2) ( overriding the methods then only it converts into concrete methods from abstract)
3) we cant create an object of abstract class, but we can create reference of Super Class, & super class can hold the Object of sub class.  ( KFC k=new MyKFC(); )


//-------------

Student Challenge - make an abstract class Shape (perimeter & area) -> Take sub classes(concrete make as ovver ride those methods) as circle &  Rectangle 





Solution:

abstract class Shape
{
abstract public double perimeter();
abstract public double area();
}

class Circle extends Shape
{
double radius=45;
public double perimeter()
{
return 2*Math.PI*radius;
}
public double area()
{
return Math.PI*radius*radius;
}

}

class Rectangle extends Shape
{
double length,breadth;

public double perimeter()
{
return 2*(length+breadth);
}

public double area()
{
return length*breadth;
}

}

class test
{
public static void main(String args[])
{

Rectangle r=new Rectangle();
r.length=50;
r.breadth=2;
System.out.println(r.area());



Shape s=new Circle();            // super class can hold/create  child/sub class object.
System.out.println(s.area());
System.out.println(s.perimeter());



}
}





//---------------------





















