OPERATOR AND EXPRESSIONS 


Arithmetic (c operator and expressions: 
➢ +,	-,	*,	/,	%.	
➢ These	operators	can	be	applied	on	any	type	of	data	except	Boolean.	
➢ %	operator	works	on	>loat	and	double	data	types	without	taking	the	
decimal	point	in	quotient	but	the	divisor	and	dividend	contain	the	
decimal	point.	
➢ To	write	down	the	expression	one	should	be	familiar	with	the	
precedence	of	operators.	
➢ *,	/,	%	have	higher	precedence	than	+,	-.	
➢ To	change	the	precedence	of	operators	()	are	used.	
➢ The	mechanism	of	converting	data	type	internally	by	the	compiler	is	
known	as	“COERCION”.	
➢ Data	types	of	expression:	
• The	addition,	subtraction,	multiplication	or	division	
between	the	byte,	short	and	int	results	as	int	as	they	belong	
integer	type	of	data.	
• Byte	and	short	are	provided	by	java	for	backward	
compatibility.	
• If	>loat	is	used	in	the	expression	then	the	result	is	>loat.	
• If	Double	is	used	in	the	expression	then	the	result	is	double.	
• When	char	is	used	the	result	is	int	type	as	char	is	part	of	
int(codes).


Increment / decrement operators and 
expressions: 
➢ Post++,	post-	-,	++pre,	-	-pre.	
➢ Pre	and	Post	operators	both	work	in	same	way.	➢ In	pre	increment/decrement	>irst	the	value	is	incremented/
decremented	and	then	utilized.	
➢ In	post	increment/decrement	>irst	the	value	is	utilized	and	then	
incremented/decremented.	
➢ The	data	types	remain	the	same	on	application	of	these	operators.	
➢ These	operators	cannot	be	applied	to	Boolean	type	of	data.	
Bitwise operators: 
➢ These	perform	operations	on	bits	of	data.	
➢ These	operations	are	faster	compared	to	other	operators.	
➢ Bitwise	operators	available	in	java	are:	
➔ AND			&	
• result	is	true	if	both	are	true.	
➔ OR						|	
• result	is	true	if	any	one	of	the	values	is	true.	
➔ NOT			~	
• result	is	inversed.	
➔ XOR			^	
• result	is	true	if	any	one	of	it	is	true.	
➔ Right	shift					>>	
• numbers	are	shifted	to	right	by	one	unit	and	the	empty	space	is	
>illed	by	‘0’.	
➔ Unsigned	right	shift			>>>	
• this	operator	extends	the	right	shift	operator.	
➔ Left	shift			<<	
• numbers	are	shifted	to	left	by	one	unit	and	the	empty	space	is	
>illed	by	‘0’.	
➢ These	operators	can	be	performed	on	only	integer	type	of	data.	
Bit Merging and Masking.


One	of	the	aplication	of	bitwise	operators.	
➢ They	are	used	to	check	whether	the	bits	are	marked	as	zero	or	one.	
➢ The	process	of	setting	one	of	the	bit	as	‘1’	is	known	as	merging	(using	
or	operator).	
➢ To	check	if	the	bit	is	on	or	not	by	using	and	operator	is	known	as	
masking.	
➢ 4	bits	is	also	known	as	nibble.	
➢ XOR	operation	is	used	for	Swapping	two	numbers	without	inserting	
any	third	number.	
Widening and Narrowing: 
➢ It	is	related	to	conversion	of	data	type	of	given	data	item.	
➢ Widening:	the	process	of	storing	the	data	of	smaller	size	data	type	
into	a	larger	size	data	type	can	be	done	automatically	by	the	compiler.	
• The	compiler	directly	converts	the	data	type	without	showing	
any	errors	i.e	from	source	data	type	to	the	destination	data	
type.	
• Since	it	is	done	internally	it	is	said	as	automatically.	
• The	source	and	destination	data	type	should	be	compatible.	
• it	is	also	known	as	upcasting.	
➢ Narrowing:	the	process	of	storing	the	data	of	larger	size	data	type	
into	a	smaller	size	data	type.	
• due	to	difference	in	size	it	may	lead	to	loss	of	data.	• it	is	not	compatible.	
• typecasting	is	required	for	narrowing.	
➢ Boolean	is	compatible	only	with	Boolean






// Arithematic Operators

package arithematic;

public class Arithematic {

    public static void main(String[] args) {
        
        /* for integer values
        int a=14,b=5;
        
        int c=a/b;
        int r=a%b;
        
        System.out.println(c);
        System.out.println(r);*/
        
        
        
        /*for float values
        float a=14.3f,b=3.2f;
         
        float c=a/b;
        float r=a%b;
        
        System.out.println(c);
        System.out.println(r);*/
        
        
        
        /* for different data types
        byte a=10;
        short b=15;
        int c=a+b;
        
        float a=12.5f;
        long b=1231;
        float c=a*b;
        
        float a=12.5f;
        double b=123;
        double c=a*b;
        
        char a=40;
        int b=30;
        int c=a-b;
        System.out.println(c);
        */
        
        
        System.out.println((10+20)/2);
        System.out.println(10/(2*5));
    }
    
}



// Calculate Area Program - Student Challenge Program

package expression;

import java.lang.*;
import java.util.*;


public class Expression 
{
   /* public static void main(String[] args) 
    {
        float base,height,area;
        System.out.println("Enter Base and Height");
        Scanner sc=new Scanner(System.in);
        base=sc.nextFloat();
        height=sc.nextFloat();
        area=base*height*0.5f;
        //area=1f/2f*base*height;
        //area=base*height/2;
        System.out.println("Area of Triangle is "+area);
    }
    */
    
    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
         
        int a,b,c;
        double s,area;
        
        System.out.println("Enter 3 Sides of a Triangle");
        a=sc.nextInt();
        b=sc.nextInt();
        c=sc.nextInt();
        
        s=(a+b+c)/2f;
        
        area=Math.sqrt(s*(s-a)*(s-b)*(s-c));
        
        System.out.println("Area of Triangle is "+area);
        
         
    }
}


// Calculate Quadratic Equation - Student Challenge Program

package expression1;

import java.lang.*;
import java.util.*;

public class Expression1 {

   
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
       
       int a,b,c;
       double r1,r2;
       
       System.out.println("Enter the values of a ,b and c");
       a=sc.nextInt();
       b=sc.nextInt();
       c=sc.nextInt();
       
       r1=(-b+Math.sqrt(b*b-4*a*c))/(2*a);
       r2=(-b-Math.sqrt(b*b-4*a*c))/(2*a);
       
       System.out.println("Roots are "+r1+" "+r2 );
    }
    
}

// wap Cuboid - Student Challenge Program

package expression2;

import java.lang.*;
import java.util.*;


public class Expression2 {

    
    public static void main(String[] args) 
    {
        Scanner sc=new  Scanner(System.in);
        int length,breadth,height;
        int totalArea,volume;
        
        System.out.println("Enter length, breadth and height");
        length=sc.nextInt();
        breadth=sc.nextInt();
        height=sc.nextInt();
        
        totalArea=2*(length*breadth+length*height+breadth*height);
        
        volume=length*breadth*height;
        
        System.out.println("Total Area "+totalArea);
        System.out.prinlt("Volume "+volume);
        
        
    }
    
}



//Increment & Decrement Operators

package incdec;

public class IncDec {

    public static void main(String[] args) {
        
        //float x=3.5f
        //char x='A'
        //byte x=5
        
        /*int x=5;
        x++;  //++x
        System.out.println(x);*/
        
        /*int x=5,y;
        y=x++; //++x
        System.out.println(x+" "+y);*/
        
        int x=5,y=4,z;
        z=2 * x++ + 3 * ++y;
        System.out.println(z);
    }
    
}




// Masking & Swapping

package bitwise;


public class Bitwise {

    /*
    public static void main(String[] args) 
    {
      int a=10, b=15;
      
      a=a^b;
      b=a^b;
      a=a^b;
      
      System.out.println(a+ " "+b);
    }
    */
    
    /*
    public static void main(String[] args) 
    {
      byte a=9, b=12;
      
      byte c;
      
      c=(byte)(a<<4);
      c=(byte)(c|b);
      
      System.out.println((c&0b11110000)>>4);
      System.out.println((c&0b00001111)>>4);
      
    }
    */
    
    
    public static void main(String[] args) 
    {
      
      
      byte c;
      
      c=(byte)(9<<4);
      c=(byte)(c|12);
      
      System.out.println((c&0b11110000)>>4);
      System.out.println((c&0b00001111)>>4);
      
    }
}


//widening & Narrowing

package widenarrowdemo;

public class WideNarrowDemo {

    public static void main(String[] args) {
        byte b=5;
        short s=120;
        int i=10;
        long l=10;
        //float f=10;
        float f=10.5f;
        double d=10;
        char c=10;
        boolean bl=true;
        
        /*b=(byte)s;
        System.out.println(b);
        i=s;
        l=s;
        f=s;
        d=s;*/
        
        i=(int)f;
        System.out.println(i);
    }
    
}
