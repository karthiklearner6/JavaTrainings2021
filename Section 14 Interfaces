Interfaces
-----------


1) what is an interface?
2) Comparision between Multiple Inheritance vs Interfaces.
3) Syntax & Examples of Interfaces.
4) Do's and Dont's for Interfaces.


Inheritance - borrowing, Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another. ...
              class can extends from an existing class.
              
abstract classes -    If a class is having one or more abstract methods, Definetly it is known as Abstract Class.
Purpose of abstract class is to achieve polymorphism as well as inherit. An abstract class can provide some features for subclasses, as well as it is usefull for polymorphism.  


interface - interface is completely used for achieving polymorphism. It doesnt have anything to give to sub classes. If we want to achieve only polymorphism   then we dont want to borrow anything , then we use interfaces.


abstract class example:
-----------------------

abstract class Test
{

abstract public void meth1();
abstract public void meth2();
}

class Test2 extends Test      // we are making concrete class by using polymorphism(overriding)
{                               // for normall classes we cant extend more than one classes.
public void meth1()
{

}
public void meth2()
{

}
}


interface example:
-----------------

interface Test1   // instead of abstract class keyword we r writing interface keyword
{
void meth1();     // in interface it understands automatically as void meth1(); -> abstract public void meth1();
void meth2();      // all the methods are by default abstract as well as they are public

//void metho6(){}  // - this is an error, because interface abstract method doesnt have body.(methods inside an interface are by default abstract methods, so abstract methods doesnt have body)


}

class Test2 implements Test1   // one interface is inheriting to class means we use implements keyword( we are making concrete class by using polymorphism)
{                              // In java one class can implements more than one interfaces.(but by using extend we cant do more than one class)

public void meth1()
{
System.out.println("meth1");
}

public void meth2()
{
System.out.println("meth2");
}

public void meth3()
{
System.out.println("this is method 3");
}

}

class test
{
public static void main(String ar[])
{
Test1 t=new Test2();  // parent class can hold the child class object.(this is also called as dynamic method dispatch / runtime polymorphism)
t.meth1();
t.meth2();
t.meth3();   // this method we cant call, becz its reference is not Test1, meth3 reference is belongs to Test2 class.

}

}


-> interfaces are useful for achieving run time polymorphism.
-> interfaces are only meant for overriding, so definetly meant for run time polymorphism.



//--------------------------------------------------------

RealTime Example :-
-----------------

Question - we are having a phone with call and sms - write it as class, want to develop an ICamera(with options click & record), IMusicPlayer(with play & stop) these are the new ideas...

class Phone 
{
    public void call() { System.out.println("Phone call"); }
    public void sms() { System.out.println("Phone sending SMS"); }
}

interface ICamera
{
    void click();
    void record();
}

interface IMusicPlayer
{
    void play();
    void stop();
}

class SmartPhone extends Phone implements ICamera,IMusicPlayer
{
    public void videoCall() { System.out.println("Smart Phone video calling"); }
   
    public void click() { System.out.println("Smart Phone Clicking Photo"); }
    public void record() { System.out.println("Smart Phone recording video"); }
    public void play() { System.out.println("Smart Phone playing music"); }
    public void stop() { System.out.println("Smart Phone stopped playing music"); }

}
public class test
{

    public static void main(String[] args) 
    {
        
//SmartPhone sp=new SmartPhone();   // we can call all the methods because, its extending phone class and implementing all other interfaces
//sp.call();
//sp.sms();
//sp.videoCall();
//sp.click();
//sp.record();
//sp.record();
//sp.play();
//sp.stop();

//Phone  p=new Phone();
//p.call();
//p.sms();


//ICamera ic=new SmartPhone();
//ic.click();
//ic.record();
//ic.play(); // we can only call ICamera methods becz reference is ICamera



//IMusicPlayer sp=new SmartPhone();
// sp.play();
// sp.stop();
        
    }
    
}




//----------------------------------

//callback methods are used in event handling.

interface Member
{
    public void callback();
}

class Store
{
    Member members[]=new Member[10];
    int count=0;
       
    void register(Member m)
    {
        members[count++]=m;
    }
    void inviteSale()
    {
        for(int i=0;i<count;i++)
            members[i].callback();
    }
    
}

class Customer implements Member
{
    String name;
    
    Customer(String n)
    {
        name=n;
    }
    public void callback()
    {
        System.out.println("Ok, I will visit,"+name);
        
        
    }
    
}

public class SCInterface1 {

    
    public static void main(String[] args) 
    {
        Store s=new Store();
        Customer c1=new Customer("John");
        Customer c2=new Customer("Smith");
        
        s.register(c1);
        s.register(c2);
        
        s.inviteSale();
    }
    
}


//---------------------------------------------------------------------

// Does & Donts of Interface


program - 1:
-----------

// Developing an interface with static methods & static variables.

interface Test1  
{

final static int x=456;
void meth1();    
void meth2();     
// void metho6(){} // error: interface abstract methods cannot have body

public static void metho44()
{
System.out.println("this is static method calling by class name");

}

}

class Test2 implements Test1
{
public void meth1()
{
System.out.println("Test1");
}
public void meth2()
{
System.out.println("Test2");
}

}


class test
{
public static void main(String ar[])
{
Test1 t=new Test2();  
t.meth1();
t.meth2();
Test1.metho44(); // we can access through class name, static fields

System.out.println(Test1.x);  // we can access through class name, static fields
}
}


//---------------------------------------------------------


program -2:
----------

interface Test1  
{

void meth1();    
void meth2();     
}

interface Test2 extends Test1
{
void methonew();  // yes we can extend all the methods of one interface to another interface, and we can create/new method in new-interface(Test2).
}


class test
{
public static void main(String ar[])
{
Test1 t=new Test2();  
t.meth1();
t.meth2();

}
}


//-------------------------------------

// Interface can have default methods, (but not concrete methods)

interface Test1  
{

interface Test1  
{

void meth1();    
void meth2();     

default void metho7()  // interface accepts default methods
{
System.out.println("interface accepts default methods");
}

}

class Test2 implements Test1
{
public void meth1()
{
System.out.println("Test1");
}
public void meth2()
{
System.out.println("Test2");
}

}



class test
{
public static void main(String ar[])
{
Test1 t=new Test2();  
t.meth1();
t.meth2();

t.metho7();
}
}
  
//-----------------------------

// we can override the default methods - (to update/modifiying existing interfaces without disturbing exisisting classes we can make use of default methods)


interface Test1  
{

void meth1();    
void meth2();     

default void metho7()  // interface accepts default methods
{
System.out.println("interface accepts default methods");
}

}

class Test2 implements Test1   // In the new class we can ovveride the method
{
public void meth1()
{
System.out.println("Test1");
}
public void meth2()
{
System.out.println("Test2");
}


public void metho7()  // interface accepts default methods
{
System.out.println("we can override default methods(to update/modifiying existing interfaces without disturbing exisisting classes we can make use of default methods)");
}

}


class test
{
public static void main(String ar[])
{
Test1 t=new Test2();  
t.meth1();
t.meth2();

t.metho7();
}
}




































