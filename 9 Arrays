
ARRAYS 
One-Dimensional ARRAY: 
➢ Array	is	a	collection	of	similar	data	elements.		
➢ In	java	the	array	size	is	given	after	creating	the	new	object.	
As			int	A[]=	new	int[x];	
Where	A[]	is	the	reference	and	int[x]	is	the	object.	
Where	object	is	created	in	the	heap.	
And	the	reference	is	either	in	stack	or	heap.	
➢ Location	of	characters	in	array	can	be	accessed	by	using	their	index.	
➢ Every	array	in	java	has	length	as	its	property	which	can	be	accessed	
by	using	“array-name.length”.	
➢ For	loops	are	most	frequently	used	for	arrays.	
➢ Using	for	loop	all	the	elements	in	the	arrays	can	be	accessed/	
elements	in	array	can	be	transveresed	using	arrays.	
➢ Java	has	introduced	for	each	loop	for	accessing	arrays	in	version	java	
1.5	or	java	5.	
➢ For	each	loop:	syntax						for(type	var	:	array)	
																		{	
																				Statements	using	var;	
																		}																								


Example Program for arrays:

class test 
{ 
 public static void main(String args[]) 
 { 
 int A[]={2,4,6,8,10} 
 for(int i=0;i<A.length;i++)    // forword direction
 { 
 System.out.println(A[i]); 
 } 
 for(int i=A.length-1;i>=0;i--)  // backward direction
 { 
 System.out.println(A[i]); 
 } 
 } 
}


//-------------------------






package arrays;


/*

class OneDimensionalArrays
{  
public static void main(String args[])
{  
int a[]=new int[5];					//declaration and instantiation  
a[0]=100;							//initialization  
a[1]=200;  
a[2]=300;  
a[3]=450;  
a[4]=520;  
  
for(int i=0;i<a.length;i++)//length is the property of array  
System.out.println(a[i]);  
}
}  

*/


/*


class OneDimensionalArrays
{
	   public static void main(String [] args) 
	    {
	      int[] iarr = {12,34,45,67,89};
	      for(int x : iarr) 
	        {
		System.out.println(x);
	}
	double []darr = {1.1,2.2,3.3,4.4,5.5,6.6};
	for (double y:darr) 
	 {
	     System.out.println(y);
	}
	char carr[] = {'a', 'b', 'c', 'd'};
	for (char z:carr) 
	  {
	     System.out.println(z);
	        }
	    }
}


*/


/*

//Declaration, Instantiation and Initialization of Java Array

class OneDimensionalArrays
{  
public static void main(String args[])
{  
int a[]={123,76,434,2345,35,90};//declaration, instantiation and initialization  

for(int i=0;i<a.length;i++)//length is the property of array  
System.out.println(a[i]);  //printing array  
}
}  


*/


/*

//For-each Loop for Java Array
syntax
for(datatype variable:array){  
	//body of the loop  
	}  


*/


/*

class OneDimensionalArrays
{  
public static void main(String args[])
{  
int arr[]={123,76,434,2345,35,90};
//printing array using for-each loop  
for(int i:arr)  
System.out.println(i);  
}
}  


*/





/*

//ArrayIndexOutOfBoundsException
//The Java Virtual Machine (JVM) throws an ArrayIndexOutOfBoundsException if length of the array in negative, equal to the array size or greater than the array size while traversing the array.

  
public class OneDimensionalArrays
{  
public static void main(String args[])
{  
int arr[]={150,640,750,870};  
for(int i=0;i<=arr.length;i++)
{  
System.out.println(arr[i]);  
}  
}
}  


*/






class test
{
 public static void main(String args[])
 {
 int A[]={2,4,6,8,10}
 for(int i=0;i<A.length;i++)   //forword direction
 {
 System.out.println(A[i]);
 }
 for(int i=A.length-1;i>=0;i--)  //backword direction
 {
 System.out.println(A[i]);
 }
 }
}




➢ For	each	loop:	syntax						for(type	var	:	array)	
																		{	
																				Statements	using	var;	
																		}		

// ---- for each loop ----- can be done only in forword direction =, not backword direction //

class test
{
 public static void main(String args[])
 {
 int A[]={2,4,6,8,10},x;
 for(int x:A)
 {
 System.out.println(x);
 }
}
}



//1-D Array

package arraypractice1;

public class ArrayPractice1 {

    public static void main(String[] args) {
        int A[]=new int[10];  //creates size of 10, reference variable is A
        int B[]={1,2,3,4,5};  //initializing array
        
        /*int C[];          // 	declaration of array C
        C=new int[10];      // array of object size  10
        
        B[2]=15;*/
        
        /*for(int i=0;i<A.length;i++)
        {
            System.out.println(A[i]);
        }*/
        
        
        /*for(int i=0;i<B.length;i++)
        {
            System.out.println(B[i]);
        }*/
        
        
        /*for(int x:B)		// for each loop is used for reading elements in the array
        {
            System.out.println(x++);   // by changing x we cannot change elements of array
        }
        for(int x:B)
        {
            System.out.println(x);
        }*/
        
        
        /*for(int i=0;i<B.length;i++)      
        {
            System.out.println(B[i]++); // by using counter controlled for loops only we can increment vlaues.

	for(int x:B)
	{
	System.out.println(x);
	}



        }*/



	/*

	float k[]={3,34,467,345,756};
	System.out.println(k);    // o/p : [ - Array , F - float  & code for 1-d array...
					// we cant print all elements by writing variable, we hve to write in for loop / for each loop for traversing the elements
	System.out.println(k.length);

	*/
        
        
        System.out.println(B.length);
    }
    
}

//--------------------------------------------

//Finding sum of all elements

public class SumArray
{
public static void main(String args[])
{

	int A[]={34,56,3,6,76,2,1,5,7,7};
	int sum=0;

	for(int i=0;i<A.length;i++)
	{
		sum=sum+A[i];
	}
	System.out.println("Sum is "+sum);
}
}


		// or

//finding sum of all elements by using for each loop

public class SumArray
{
public static void main(String args[])
{

	int A[]={34,56,3,6,76,2,1,5,7,7};
	int sum=0;

	for(int x:A)
	{
		sum=sum+x;
	}
	System.out.println("Sum is "+sum);
}
}

//-----------------------


// Searching an Element - searching can be only done when no duplicates / unique / distinct are there in an array it wil be possible (we are using linear search)


import java.util.*;
public class FindArray
{
public static void main(String args[])
{
	Scanner sc=new Scanner(System.in);
	int A[]={34,56,3,6,76,2,1,5,7,7};
	int key;

	System.out.println("enter a key");
	key=sc.nextInt(); //6

	for(int i=0;i<A.length;i++)
	{
		if(key==A[i]) 6==6
		{
		System.out.println("element Found at "+i);
		System.exit(0);
		}
		
	}
	System.out.println("not found");

}
}


//===============================================

//finding maximum value of given array elements

import java.util.*;
public class Test
{
public static void main(String args[])
{
	Scanner sc=new Scanner(System.in);
	int A[]={34,56,3,6,76,2};

	int max=A[0];
	for(int i=0;i<A.length;i++)
	{

		if(A[i]>max)
		{
			max=A[i];
		}
	}
System.out.println(max);

}

}

//-----------------------------

//Find Second Largest Element


import java.util.*;

public class Test
{
    
    public static void main(String[] args) 
    {
        int A[]={3,9,7,8,12,6,15,5,4,10};
        int max1,max2;
        
        max1=max2=A[0];
        
        for(int i=0;i<A.length;i++)
        {
            if(A[i]>max1)
            {
                max2=max1;
                max1=A[i];
                
            }
            else if(A[i]>max2)
            {
                max2=A[i];
            }
        }
        
        System.out.println("Second Largest is "+max2);
  }
        
        
    }
    
      
//------------------------------------------------------    
    
    /* Searching a Key
    
        System.out.println("Eneter a Key " );
        key=sc.nextInt();
        
        
        for(int i=0;i<A.length;i++)
        {
            if(key==A[i])
            {
                System.out.println("Element Found at :"+i);
                System.exit(0);
            }
        }
        System.out.println("Not found");
    
        
    }*/


    /* Finding Sum of Elements
    public static void main(String[] args) 
    {
        int A[]={3,9,7,8,12,6,15,5,4,10};
        
        int sum=0;
        
        for(int x:A)
        {
            sum=sum+x;
        }
        
        System.out.println("Sum is "+sum);
        
        
        
    }  */ 
}



//========================================================


//Rotation of Array   
   /* //Left Rotation
    public static void main(String[] args) 
    {
        int A[]={3,9,7,8,12,6,15,5,4,10};
        
        for(int x:A)
            System.out.print(x+",");
        System.out.println("");
        
        int temp=A[0];  //storing 0th index value into temporary variable. so it may be empty, //so 1st index can be stored into 0th index like that it wil be left shifted by using for / for //each loop.
        
        for(int i=1;i<A.length;i++)
        {
            A[i-1]=A[i];
        }
        A[A.length-1]=temp;
        
        for(int x:A)
            System.out.print(x+",");
        System.out.println("");
    }   */
}


//-------------------------------------------------

//Inserting an Element  - while inserting an element(java) in middle of the array, we should have some empty in array.For Ex: if we take 10 --> we have elements of lessthan 8/9 values only values accepted becoz if inserted element is inserted at particular index then past elements must move to rytside.so some empty spaces must be there.

package scarray2;

public class SCArray2 
{
    public static void main(String[] args) 
    {
        int A[]=new int[10];
        A[0]=3;A[1]=9;A[2]=7;A[3]=8;A[4]=12;A[5]=6;
        
        int n=6;
        
        for(int i=0;i<n;i++)
            System.out.print(A[i]+",");
        System.out.println("");
     
        int x=20;
        int index=2;
        
        for(int i =n;i>index;i--)    //if the n value is greaterthan,present inserted 					//indexvalue it wil be true then value wil be inserted 
            A[i]=A[i-1];//rytside values shifting logic
        A[index]=x;     // when ever emptyspace is created in particular index,then x value wil 				//inserted into that particular index A[index] 
        
        for(int i=0;i<n;i++)
            System.out.print(A[i]+",");
        System.out.println("");
     
}        
    }
    
//==================================================


Deleting a particular element in array -> here full values/elements present in  array also no problem.becoz we are not shifting the values.

->After removing / when we delete the particular element in array , the index wil not deleted , just element in that index is deleted, as that we should not keep empty, so values wil be shifted into that empty space, & all will be shifted in order.

//==================================================

//Increasing Size of Array

/*
package scarray3;

public class SCArray3 
{
    public static void main(String[] args) 
    {
        int A[]={8,6,10,9,2};
        
        System.out.println("Length of A="+A.length);
        
        int B[]=new int[10];
        
        for(int i=0;i<A.length;i++)
        {
            B[i]=A[i];
        }
        A=B;
        
        System.out.println("Length of A="+A.length);
        
    }

/*
Firstly, A[] is holding 5 values, if we want to increase the size, take another empty array (like B is reference of size 10), so copy all the a array elements into b arrays.

Make that A reference holding B[]. Then Garbage collector wil remove that remaining object. So A is holding/refering to B[]. And make B[] make as NULL. So the A[] becomes (as old B[]) so A[] having the size of 10. 

This is the only method to increase the size of making array in java.

*/




*/
    /*Reverse Copying an Array
	--> Traversing an array from ryt to left 1st. And next to print those taken elements traverse that array from left to right.


class Test
{
   public static void main(String[] args) 
    {
        int A[]={8,6,10,9,2,15,7,13,14,11};
        int B[]=new int[10];
        
        for(int i=A.length-1,j=0;i>=0;i--,j++)
        {
            B[j]=A[i];
        }
        
        for(int x:B)
        {
            System.out.print(x);
        }
     }

}

*/
    
    /* copy array Ato B

public class Test
{
   public static void main(String[] args) 
    {
        int A[]={8,6,10,9,2,15,7,13,14,11};
        int B[]=new int[10];
        
        for(int i=0;i<A.length;i++)
        {
            B[i]=A[i];
        }
        
	System.out.println("B copied elements are ");
        for(int x:B)
        {
            System.out.print(x+",");
        }


}

}
        
   
        
    } */  
}




//=================






Two-Dimensional ARRAY: 
➢ Two-dimensional	array	are	suitable	for	matrices	and	tabular	form.	
➢ Syntax	for	creating	two-dimensional	array	in	java	is		
:	int	A[][]	=	new	int	[3][4].	
➢ It	is	also	known	as	array	of	arrays	or	collection	of	arrays	
➢ Object	is	created	In	heap	but	the	reference	may	or	may	not	be	created	
in	heap.	
➢ Array_name.length	gives	number	of	rows.	
➢ Array_name[index].length	gives	the	number	of	columns.	
Example	program:

public class ArrayPractice 
{
    public static void main(String[] args) 
    {

int x[][]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};

for(int i=0;i<x.length;i++)
{
for(int j=0;j<x[0].length;j++) // here we can write x[0] or x[1] or x[2]
{
System.out.print(x[i][j]+" ");
}
System.out.println("");
}

}
}





class test 
{ 
 public static void main(String args[]) 
 { 
 int A[][]; 
 for(int i=0;i<A.length;i++) 
 { 
 for(int j=0;j<A[0].length;j++) 
 { 
 System.out.println(A[i][j]); 
 } 
 System.out.println(“\n”); 
 } 
 } 
}





2) By using for each loop program:

/*
public class Keyboard
{
    public static void main(String[] args) 
    {

int A[][]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
//here A is an main array.its a reference.
//r is an holding array indexes(rows like, r[0],r[1],r[2])
// r[0] is holding - {1,2,3,4} ,r[1] - {5,6,7,8} …….

for(int r[]:A )        // r is holding rows its one dimensional
{
for(int c:r )          // c is columns, we r taking elements from r
{
System.out.print(c+"\t");   // y is containing the elements we are printing
}
System.out.println();
}

}
}



3)

public class Keyboard
{
    public static void main(String[] args) 
    {

int B[][]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};

System.out.println(B);  // [[I@ code  ---> we cant print 2d array directly by s.o.pln, but it shows some code about that array. 
System.out.println(B.length);

}

}


➢ In	for	each	loop	the	array	have	no	integer	elements	but	the	reference	
elements.	
➢ Syntax	of	for	each	loop	for	two	dimensional	array:	

for(type	var	:array)	
{	
		for(type	var1	:type	var)	
      { 
 Statements	using							
			var(type	var	1);	
        }	
}


Example Program :

class test: 
{ 
 public static void main(String args[]) 
 { 
 int A[]; 
 for(int x[]:A) 
 { 
 for(int y:x) 
 { 
 System.out.println(y); 
 } 
 System.out.println(“\n”); 
 } 
 }


Jagged	array	is	a	type	of	array	in	which	the	members	are	of	different	
sizes.	
➢ In	jagged	array	the	members	of	arrays	are	created	separately	
according	to	their	sizes	using	their	indices


Jagged Array:


public class Keyboard
{
    public static void main(String[] args) 
    {

int A[][];
A=new int[3][];


// here there are 3 rows, but column sizes are different.its not regular 2d array its an jagged array(no.of elements in each row are varrying).
A[0]=new int[5];
A[1]=new int[3];
A[2]=new int[8];

for(int i=0;i<A.length;i++)  
{
for(int j=0;j<A[i].length;j++)
{
System.out.print(A[i][j]+" ");  // here in A we r not giving values, we wil get answer all as Zero's
}
System.out.println("");
}
}

------


Jagged Array by using for each loop


public class Keyboard
{
    public static void main(String[] args) 
    {

int A[][];
A=new int[3][];


A[0]=new int[5];
A[1]=new int[3];
A[2]=new int[8];

for(int x[]:A)  
{
for(int y:x)
{
System.out.print(y+" ");   
}
System.out.println("");
}
}





//2D Arrays - Jagged Arrays

public class ArrayPractice 
{
    public static void main(String[] args) 
    {
        //Creating Array of size 5X5 - model-1
        int A[][]=new int[5][5];
        
        //Creating 2D array for size 5X5 - model-2
        int B[][];
        B=new int[5][5];
        
        int [][]C=new int[5][5];  // can write brackets1st, side arrayname next, this is also 2D  -  model-3
        int []D[]=new int[5][5];  // can write inbetween arrayblocks also, this is also 2D - model-4 
        
        //E is a 2D array and F is a 1D array
        int[] E[],F;               // if we write int[] E[],F[]; - F & E both are 2dimensional arrays(bczits in same line declaring).
        E=new int[5][5];
        F=new int[5];
        
        //G H and I are 1D arrays, becz int[] - this is the array reference.
        int[] G,H,I;	          // int[] G,H,I[];  ---> now I is 2 Dimensional array.						
        							
        
        //Creating and initialising array of size 3X4
        int M[][]={{1,2,3,4},{5,6,7,8},{9,10,11,12}};
        
       //Jagged Array
        int X[][];
        X=new int[3][];
        
        X[0]=new int[5];
        X[1]=new int[3];
        X[2]=new int[8];
        
        
        //Displaying Array M
        for(int x[]:M)
        {
            for(int y:x)
            {
                System.out.print(y+" ");
            }
            System.out.println("");
        }
        
    }
    
}








//----------------------------------

Student Challenge - Quiz
matrix Addition / sum of two matrices
multiplication of two matrices
sorting elements of strings in array










Matrix Addition: 
If the array size of both the matrix is same then only we can do matrix addition.

public class Add{

public static void main(String[] mat)
{

int A[][]={{3,5,9},{7,6,2},{4,3,5}};
int B[][]={{3,5,9},{7,6,2},{4,3,5}};

for(int i=0;i<A.length;i++)
{
for(int j=0;j<A[0].length;j++)
{
	c[i][j]=A[i][j]+B[i][j];
}
}

for(int x[]:c)
{	
	for(int y:x)
	{
		System.out.print(y+" ");
	}
	System.out.println("");

}
}
















public class SCArray4
{
    
    
    public static void main(String args[])
    {
        
        String arr[]={"java","python","pascal","smalltalk","ada","basic"};
        
        java.util.Arrays.sort(arr);
        
        for(String x:arr)
            System.out.println(x);
        
        
        
    }
}    

//Matrix Multiplication
    /* Multiply 2 Matrices
    public static void main(String[] args) 
    {
        int A[][]={{3,5,9},{7,6,2},{4,3,5}};
        int B[][]={{1,0,0},{0,1,0},{0,0,1}};
        
        int C[][]=new int[3][3];
    
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                C[i][j]=0;
                for(int k=0;k<3;k++)
                {
                    C[i][j]=C[i][j]+A[i][k]*B[k][j];
                }
            }
        }
        
        for(int x[]:C)
        {
            for(int y:x)
            {
                System.out.print(y+" ");
            }
            System.out.println("");
        }
    
    }
    
    */
    
    
    
    
    /* Adding 2 Matirces
    public static void main(String[] args) 
    {
        int A[][]={{3,5,9},{7,6,2},{4,3,5}};
        int B[][]={{1,5,2},{6,8,4},{3,9,7}};
        
        int C[][]=new int[3][3];
        
        for(int i=0;i<A.length;i++)
        {
            for(int j=0;j<A[0].length;j++)
            {
               C[i][j]=A[i][j]+B[i][j];
               
            }
        }
        
        for(int x[]:C)
        {
            for(int y:x)
            {
                System.out.print(y+" ");
            }
            System.out.println("");
        }
    
    }   
}

*/ 


Quiz:


Which of the following can be used to acces the first element of an array named testArr??

1) testArr[1]
2) testArr[2]
3) testArr[0]
4) testArr[first]

An array can store values of different datatypes???

1) True
2) False

Which of the following is a correct way to declare an array in java?

1) int[] arr1=new int[3];
2) int  arr1[]=new int[3];
3) Both


What is the most common type of loop used to step through an array?

1) while
2) for
3) do while

What is the most common type of loop used to step through an array? 4th option

int arr[][]=new int[5][4]
int[] arr[]=new int[5][4]
int[][] arr=new int[5][4];
int arr[][]=int [5][4];






















