

Inner Class - We can define a class inside another class, Outer class can have an inner class inside i.e called as nested class. 

What is the need of Inner Class - If we had a class it is becoming very big, & very complex, & we want to make it very simple, anything is repeating in that one.
To reduce the complexity of bigger class, we can define a class inside a class. 

Different types of Inner classes : 
1) nested Inner class
2) Local inner class
3) Anonymous inner class
4) static inner class

Example of Nested Inner class:

class Outer
{
int x=10;

class Inner
{
int y=20;
void innerDisplay()
{
System.out.println(x);     //Inner class can access the members of outer class directly.(here x variable is outer class member)
System.out.println(y);     
}
}


void outerDisplay()
{
Inner i=new Inner();     //Outer class can not access the members of Inner class directly, unless inner class object creation should be done. It can create an object and use the members of inner class from outer class.
i.innerDisplay();
System.out.println(i.y);        
}
}

public class test{

    public static void main(String[] args) 
    {
		Outer o=new Outer();
		o.outerDisplay();


       // Outer.Inner oi=new Outer().new Inner();
       // oi.innerDisplay();
        
    }
    
}

//------------------------------


class Outer
{
int x=10;

class Inner
{
int y=20;
void innerDisplay()
{
System.out.println(x);    
System.out.println(y);    
}
}


void outerDisplay()
{
Inner i=new Inner();
i.innerDisplay();
System.out.println(i.y);
}
}

public class test{

    public static void main(String[] args) 
    {
 Outer.Inner oi=new Outer().new Inner();
 oi.innerDisplay();
        
    }
    
}



conclusion: 

1) Inner class can access the members of outer class directly.
2) Outer class can not access the members of Inner class directly, unless inner class object creation should be done. It can create an object and use the members of inner class from outer class.


//-----------------------------------------------------

//Local inner class - A class inside a method...

/*
Why do we need a class inside a method???

Usually it is usefull, when u want to write a class that is inheriting from some exisisting class (or) we want to write a class, which is implementing an interface...

*/

class Outer
{
void Display()
{
	class Inner
	{	

		void innerDisplay()
		{
		System.out.println("hello");
		}
	}

Inner i=new Inner();
i.innerDisplay();

// new Inner().Display();    // we can write like this also...

}

}

class test
{
public static void main(String arg[])
{
Outer o=new Outer();
o.Display();
}
}



//------------------------------



/*
Inner class Anonymous -Anonymous Inner class can be defined at the time of creation of object itself, we can define the class as well as create an object.

Usually these are usefull for interfaces and abstract classes. 

*/

abstract class My
{
abstract void display();
}

class Outer
{
	public void meth()
	{
		My m=new My()        // here there is no semicolumn, b/w semicolumn & bracket complete class is defined, we hve overided one method.
		{
			public void display()
			{
			System.out.println("hello");
			}
    };

		m.display();
	}
}

class test
{
public static void main(String ar[])
{
	Outer o=new Outer();
	o.meth();
}
}

// b/w semicolumn & bracket complete class , we are defining the class, inside class we are overriding the display method. we are creating the object of 'My' - class, by overriding the method  when we overide a method it becomes concrete class.

Then the name of the class is, there is no name, its anonymous class.
Here abstract class object canot be created. But we have overrided the method, so compiler wil create a name less class. That is Anonymous class & object will be created 'm' wilbe the reference,  we r callling display() by using m.





//------------------------------------


interface My
{
abstract void display();
}

class Outer
{
	public void meth()
	{
		My m=new My()        // here we r not creating an object, we are creating anonymous class, the same interface name we are using here.    
		{
			public void display()
			{
			System.out.println("hello");
			}
		};

		m.display();
	}
}

class test
{
public static void main(String ar[])
{
	Outer o=new Outer();
	o.meth();
}
}





note:
we can override the abstract methods of the abstract classes,  as well as implement interfaces using anonymous classes.

what is the usage ?? - If we want to implement an interface, & uts usage is limited, we dont hvae to write a separate class and create its object, then & there in the same place  we can implement the interface as an anonymous class. 


//------------------------------
static inner class

-> static inner classes are the static members of the outer classes. Object of static inner classes can be created outside the outer class, we can create them and acces them from anywhere, & we dont want to create the object of Outer class.

-> nested inner classes are dependent on the outer class & they are not accessible directly outside without the object of outer class. ( But object of static inner classes can be directly created outside  the outerclass without creating an object of outer class)

-> static inner classes can acces the members of  outer class, but only  static members can access but it cannot access non static members 



class Outer
{
static int x=34;
int y=20;

static class Inner
{

	void display()
	{
	System.out.println(x);
	//System.out.println(y); //Inside this static context we cannot access nonstatic (members)variable y 
	}

}
}
class test
{
public static void main(String args[])
{
Outer.Inner i=new Outer.Inner();
i.display();
}
}














