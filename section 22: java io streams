











// write a program to create text/notepad file in particular path & write the content in that file.

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;




// if we are using FileOutputStream, we should import io package, we should write try & catch blocks with FileNotFoundException


public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileOutputStream fos=new FileOutputStream("E:/MyJava/TrailPack.txt");
			String str="Learn java Programming";
			fos.write(str.getBytes());
			fos.close();
		} 
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) //this is for handling getBytes,so we write IO Exception
		{
			
			e.printStackTrace();
		}
		
		
	}

}



//------------

// another method for creation of file and storing the data (writing one byte at a time in the file)



import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;




// if we are using FileOutputStream, we should import io package, we should write try & catch blocks with FileNotFoundException


public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileOutputStream fos=new FileOutputStream("E:/MyJava/Navya.txt");
			String str="this is a text file storing the data";
			
			byte c[]=str.getBytes();   //we are getting all bytes in one array  ...//str.getBytes(); -> the string is converted into array of bytes & it stored in reference byte b. 
			for(byte x:c)           // we are writing all the bytes one by one in a file by using a loop 
			{
				fos.write(x);           // it is writing one byte at a time in the file
			}
		} 
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) //this is for handling getBytes,so we write IO Exception
		{
			
			e.printStackTrace();
		}
		
		
	}

}


//---------------------------------------------------------------------


//offset - we can get a part of a string 

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;


public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileOutputStream fos=new FileOutputStream("E:/MyJava/TrailPack.txt");
			String str="Learn java Programming";
			
			byte b[]=str.getBytes();
			
			fos.write(b, 6, str.length()-6);         // we can get part of a string
			fos.close();
		} 
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
		
		
	}

}



//----------------------------------------


// how to read the data from a file (FileInputStream)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;


public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileInputStream fis=new FileInputStream("E:/MyJava/TrailPack.txt");
			
			
			//from the file it is comming to the byte array
			byte b[]=new byte[fis.available()];  //we are creating array of byte // size of the array should be equal to the contents of the file, there is available(); -> automatically calculates content of the file only. object is created
						
			//reading 
			fis.read(b);   // which reads all the bytes from a file & it stores into b[], .read(b) -> will read the content what ever content in the file
			
			//what ever it reads it converts into string
			String str=new String(b);  // the byte array is converted into String  
			System.out.println(str);   
			
			
		} 
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
		
		
	}

}


//----------------------------------

// another method for reading the data from the file - by using while loop & do while loop


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;


public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileInputStream fis=new FileInputStream("E:/MyJava/TrailPack.txt");
			
			int x;
			while((x=fis.read())!=-1)
			{
				System.out.print((char)x);
			}
						
		} 
    
//			int x;
//			do
//			{
//				x=fis.read();
//				if(x!=-1)
//				{
//					System.out.print((char)x);
//				}
//			}while(x!=-1);
//						
//		} 
    
    
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
	
	}

}


//-----------------------------------------

// By using FileReader also we can read the file content


import java.io.FileNotFoundException;

import java.io.FileReader;
import java.io.IOException;



public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileReader fr=new FileReader("E:/MyJava/TrailPack.txt");
		
			int x;
			while((x=fr.read())!=-1)
			{
				System.out.print((char)x);
			}
		}
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
}
}


//-----------------------------------

// copying file content from one file to another file & convert the content which is in capital letters into small letters and store into the destination file.


package iostreams;


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;



public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileInputStream fis=new FileInputStream("E:/MyJava/source1.txt");  //for reading the file
			FileOutputStream fos=new FileOutputStream("E:/MyJava/source2.txt"); // for storing the content of the file
			
		
			int x;
			while((x=fis.read())!=-1)   //until ending of the file (-1) read upto there
			{
				if(x>=65 && x<=90)fos.write(x+32);  //convert which characters which are capitals into small letters
				else fos.write(x);   //which ever converted write into fos file
			
			}
			fis.close();
			fos.close();
			
		}
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
		
		
	}

}




// copying the content of 2 files, by completion of one file content after that append the content of second file...

clue: using 2 file input streams & 1 file output streams, we have SequenceInputStream - which takes 2 files InputStream, read the data one after another once 1st stream is completed, it reads anohter stream of the file 



package iostreams;


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.SequenceInputStream;



public class FileExample {

	public static void main(String[] args)  {
		
		
		try {
			FileInputStream fis=new FileInputStream("E:/MyJava/source1.txt");  //for reading the file , if the file is not there it rises filenotfound exception
			FileInputStream fis2=new FileInputStream("E:/MyJava/TrailPack.txt");  //for reading the file , if the file is not there it rises filenotfound exception
			
			FileOutputStream fos=new FileOutputStream("E:/MyJava/Destination.txt"); // for storing the content of the file, ifthe file is not existing it automaticaly creates
			
			SequenceInputStream sis=new SequenceInputStream(fis,fis2);
		
			int x;
			while((x=sis.read())!=-1)   //until ending of the file (-1) read upto there
			{
				 fos.write(x);   //which ever converted write into fos file
			
			}
			fis.close();
			fis2.close();
			fos.close();
			sis.close();
			
		}
		catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		catch (IOException e) 
		{
			
			e.printStackTrace();
		}
		
		
	}

}















//=========================================

//ByteStreams & CharArrayReader


package iostreams;




/*

import java.io.*;

public class Files 
{
    public static void main(String[] args) throws Exception
    {
        
        byte b[]={'a','b','c','d','e','f','g','h','i','j'};
        
        ByteArrayInputStream bis=new ByteArrayInputStream(b);
        
        int x;
        
        while((x=bis.read())!=-1)      //this program wil read one byte at a time & also it wil be printed
        {
            System.out.print((char)x);
            
        }
        
        bis.close();
        
    }
}



*/



/*

// to print the data what ever we write using ByteArrayOutput

import java.io.*;

public class Files 
{
    public static void main(String[] args) throws Exception
    {
        
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      
      baos.write('r');
      baos.write('a');
      baos.write('m');
      baos.write('s');  
             
      byte[] b=baos.toByteArray(); // it returns array of byte
       
      for(byte x:b)
    	  System.out.println((char)x);
      
    }
}

*/



// to print the data what ever we write into a particular path of the file.

import java.io.*;

public class Files 
{
    public static void main(String[] args) throws Exception
    {
        
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      
      baos.write('r');
      baos.write('a');
      baos.write('m');
      baos.write('s');  
             
     baos.writeTo(new FileOutputStream("E:/MyJava/Testing.txt"));
      
    }
}

//bytearrayoutputstream will contains its own array like a buffer, so after filing the data in that outputstream we cansend it anywhere(files...)




















/*

//usage of CharArrayReader class  - its also used to read characters from an array its just like as an ByteArrayInputStream 

public class Files 
{
    public static void main(String[] args) throws Exception
    {
        
        char c[]={'a','b','c','d','e','f','g','h','i','j'};
        
        CharArrayReader cr=new CharArrayReader(c);
        
        int x;
        
        while((x=cr.read())!=-1)      //this program wil read one byte at a time & also it wil be printed
        {
            System.out.print((char)x);
            
        }
        
        cr.close();
        
    }
}

*/

//----------------------------------

// learning about Files class

public class Files 
{
    public static void main(String[] args) throws Exception
    {
        // select path of any directory on you computer
       File f=new File("E:/MyJava");
       
       System.out.println(f.isDirectory());  // want to find its an directory or not...
       File list[]=f.listFiles();
        
       for(File x:list)
       {
           System.out.println(x.getParent()+" "+x.getName()+"  path -  "+x.getPath());
 
       }
      
    }
}



//-------------------------------------

//settings done by using methods setReadOnly(),

public class Files {
	public static void main(String[] args) throws Exception {

		File f = new File("E:/MyJava/Testing.txt");

		// f.setReadOnly();  // we changed this as ReadOnly, so if we use fileoutputstream also we cant able to write or do any operation on that file
		// FileOutputStream fos=new FileOutputStream("E:/MyJava/Testing.txt");

		
		
		//f.setWritable(true);  // this method is used for writing operation 
		//FileOutputStream fos=new FileOutputStream("E:/MyJava/Testing.txt");
	
		
		
	
	}
}


//--------------------------------------


serialization - storing data into a file by using FileOutputStream & PrintStream Class 



class Student
{

int rollno;
String name;
String dept;

}

class Files
{
public static void main(String args[]) throws Exception
{
FileOutputStream fo=new FileOutputStream("E:/MyJava/Testing.txt");  //we should open the file for writing so we r writing FileOutputStream


PrintStream ps=new PrintStream(fo); //for writing in a file we are using PrintStream
Student s=new Student();
s.rollno=10;
s.name="karthik";
s.dept="EEE";

ps.println(s.rollno);
ps.println(s.name);
ps.println(s.dept);

ps.close();
fo.close();

}

}



//----



class Student
{

int rollno;
String name;
String dept;

}



class Files
{
public static void main(String args[]) throws Exception
{
FileInputStream fo=new FileInputStream("E:/MyJava/Testing.txt");  //we should open the file for writing so we r writing FileInputStream


BufferedReader br=new BufferedReader(new InputStreamReader(fo)); 
Student s=new Student();
s.rollno=Integer.parseInt(br.readLine());    // we r getting the data from BufferReader(here as it is Integer we want so we are using Integer.Parse)
s.name=br.readLine();   					 // these are the Strings 
s.dept=br.readLine();

System.out.println(s.rollno+" "+s.name+" "+s.dept);;




}

}


//here we have seen all the data we stored in the form of Strings , now we wanted to store same properties of an object in the own data types.(as rollno should be integer, name,dept as String, / float is like float type ) so we are going to do that method..(by using DataInputStrem & DataOutputStream)...

//--------------------------------





//this program is for writing into the file


import java.io.*;

class Student
{
    int rollno;
    String name;
    float avg;
    String dept;
}
public class Files 
{
    public static void main(String[] args)throws Exception
    {
        //writing in a file
        FileOutputStream fos=new FileOutputStream("Student2.txt");  //writing into the file
        DataOutputStream dos=new DataOutputStream(fos);   // via DataOutputStream we are writing into the file  
        
        Student s1=new Student();  //creation of object
        s1.rollno=10;
        s1.name="John";           //intializing the members
        s1.dept="CSE";
        s1.avg=75.9f;
        
        // we are writing into the file by using DataOutputStream
        
        dos.writeInt(s1.rollno);           // we are writing the data as Integer
        dos.writeUTF(s1.name);             // Unicode Transfor Format by using this we r storing a String( we using writeUTF(); )     
        dos.writeUTF(s1.dept);
        dos.writeFloat(s1.avg);
        dos.close();
        fos.close();
        
        //This DataOutputStream data may be readable or not be Readable after running this progrm we can check the file by opening manually at that path
    }
    
}








//what ever the data we wrote in a file by uisng DataOutputStrea we can only read through, DataInputStream


//------- 
// we are reading the above data by using DataInputStream

class Student
{
    int rollno;
    String name;
    float avg;
    String dept;
}
public class Files 
{
    public static void main(String[] args)throws Exception
    {

FileInputStream fis=new FileInputStream("Student2.txt"); //reading the data
DataInputStream dis=new DataInputStream(fis); //DataInputStream is used for formatted Input from FileInputStream(fis)

Student s=new Student();

s.rollno=dis.readInt();//by using DataInputStream we are reading an integer


s.name=dis.readUTF();       //by using DataInputStream we are reading an String

s.dept=dis.readUTF();
s.avg=dis.readFloat();

System.out.println("Roll no "+s.rollno);
System.out.println("Name "+s.name);
System.out.println("Average "+s.avg);
System.out.println("Dept "+s.dept);


dis.close();
fis.close();
}
}


// Now the Problem is everytime we are writing the data & reading the data by pasing every variable, now we want to pass all the variables through object and store the data into a File at one time this is used by only Object STreams


//---------------

Serialization is a process of Storing the State of an Object & Retrieving an Object( De Searialization )...

Storing an State of an object means, storing the object as it is.Object may contains variaous properties, we want to mange by this serialization.
Serialazation will make easy to store state of an Object.

Rules for using Serializable.

1) to perform ObjectOutputStream we should implement Serializable 
2) this class must have non perameterized constructor
3) If the class is having static member & transient , there wil not be stored and there wil not be serialized.
    it will have only non static & non transient member...


Program:
-------


class Student implements Serializable
{
   private int rollno;
   private String name;
   private float avg;
   private String dept;
   public static int Data=10;
   public transient int t;
   
   public Student()
   {
	   
   }
   
   public Student(int r,String n,float a,String d)
   {
	   rollno=r;
       name=n;
       avg=a;
       dept=d;
       Data=500;
       t=500;
   }

   public String toString()
   {
       return "\nStudent Details\n"+
               "\nRoll "+rollno+
               "\nName "+name+
               "\nAverage "+avg+
               "\nDept "+dept+
               "\nData "+Data+
               "\nTransient "+t+"\n";
   }
      
}


public class Files 
{
    public static void main(String[] args)throws Exception
    {

FileOutputStream fos=new FileOutputStream("Student2.txt"); //reading the data

ObjectOutputStream oos=new ObjectOutputStream(fos);

Student s=new Student(10,"bhishma",99.234f,"mahithathma");

oos.writeObject(s);    //this method is used to writeObjects

fos.close();
oos.close();

    }
    
}   


// if we created an file, but we are not able to read by opening manually it is an binary file.
// ObjectOutputStream is serialized, but it has done in own understandable way, not in human readable data. so for reading we use ObjectInputStream & FileInputStream



//-------------continution

( desierialization )
//for reading the data from a file

class Student implements Serializable
{
   private int rollno;
   private String name;
   private float avg;
   private String dept;
   public static int Data=10;
   public transient int t;
   
   public Student()
   {
	   
   }
   
   public Student(int r,String n,float a,String d)
   {
	   rollno=r;
       name=n;
       avg=a;
       dept=d;
       Data=500;
       t=500;
   }

   public String toString()
   {
       return "\nStudent Details\n"+
               "\nRoll "+rollno+
               "\nName "+name+
               "\nAverage "+avg+
               "\nDept "+dept+
               "\nData "+Data+
               "\nTransient "+t+"\n";
   }
      
}


public class Files 
{
    public static void main(String[] args)throws Exception
    {
    	
    	
	FileInputStream fis =new FileInputStream("Student2.txt");
    	ObjectInputStream ois=new ObjectInputStream(fis);
    	
Student s=(Student)ois.readObject();

System.out.println(s);
    	

    }
    
}  








