METHODS 
What are methods: 
➢ Methods	are	members	of	classes	which	provide	functionality	for	
classes.	
➢ We	can	write	our	own	methods	in	the	classes.	
➢ The	functions	performing	on	the	data	are	known	as	methods.	
➢ When	a	method	returns	a	value	then	the	method	itself	takes	the	
value.	
➢ A	method	will	have	its	own	copy	of	variable.	


➢ Skeleton	of	method:	
returnType	methodName(parameter	list)		!signature/header	
{	
				--------------	
				--------------	
}	




Example	program:

class test 
{ 
 int max(int x, int y)    //non static variables doesnt accept static variables, so we have to make it as static method.
 { 
 if(x>y) 
 return x; 
 else 
 return y; 
 } 
 public static void main(String args[]) 
 { 
 int a=10,b=15,c; 
 c=max(a,b); 
 System.out.println(c); 
 } 
}

//(or) Another way is without writing static keyword for instance method, we can create object creation for that particular class on main()

class test 
{ 
 int max(int x, int y)    
 { 
 if(x>y) 
 return x; 
 else 
 return y; 
 } 
 public static void main(String args[]) 
 { 
 int a=10,b=15,c; 
 
 test t=new test();
 System.out.println(t.max(a,b)); 
 } 
}










Example	program:

class test 
{ 
 static int max(int x, int y)   //(formal parameters)
 { 
 if(x>y) 
 return x; 
 else 
 return y; 
 } 
 public static void main(String args[]) 
 { 
 int a=10,b=15,c; 
 c=max(a,b);                     // //(actual parameters)
 System.out.println(c); 
 
 //System.out.println(max(c)); 
 } 
}


// when a method is called the actual parameter values will pass into formal parameters, and the formal parameters will just have the copy & if any modifications are done to formal parameters it doesnt effect actual parameter variable values.




Example	program:

class test 
{ 
 static int max(int x, int y) 
 { 
 x++; 
 if(x>y) 
 return x; 
 else 
 return y; 
 } 
 public static void main(String args[]) 
 { 
 int a=10,b=15,c; 
 c=max(a,b); 
 System.out.println(c); 
 System.out.println(a);   // the value of a will not be incremented becz its local of main method(the copy only be sended to called method the changes what ever happen in called method it wont reflect again in calling mehtod)
 
 } 
}









Passing object as parameters: 
➢ To	call	a	method	from	main	method	it	is	needed	to	be	maid	static.	
➢ When	the	method	is	called	the	value	of	actual	parameters	are	copied	
in	formal	parameters	which	is	the	only	parameter	passing	method	in	
java.	
➢ The	address	of	object	in	formal	and	actual	parameter	is	Same.	
➢ String	cannot	be	modiIied	as	it	is	immutable.	
➢ A	method	can	also	return	an	object.	
Example	program:	
➢ A	method	can	have	its	object	as	the	return	type.	
Parameter passing in java. 
➢ Whoever	is	calling	a	method	is	called	as	a	caller	or	a	method	call.	
➢ The	method	which	is	called	by	a	caller	is	known	as	called	method.	
➢ The	parameters/arguments	passed	in	calling	method	are	called	as	
actual	parameters.	


class test 
{ 
 static void update(int A[]) 
 { 
 A[0]=25; 
 } 
 public static void main(String args[]) 
 { 
 int A[]={2,3,4,5,6}; 
 update(A); 
 System.out.println(A[0]); 
 } 
}


//when the objects are passed as parameters, the object it self is not passed, the reference is passed, & if the method is modifing the object, so the actual object will be modified(which is there in heap memory) 
// so now we can see array object is passed & modified by that method. This is parameter passing.
// here String cannot be modified becz String is immutable.





class test 
{ 
void change(int A[],int index,int value)    // Error -> non-static method change(int[],int,int) cannot be referenced from a static context  change(A,2,20); (so we wil make it as static method)

 { 
 A[index]=value; 
 } 
 public static void main(String args[]) 
 { 
 int A[]={2,4,6,8,10}; 
 change(A,2,20); 
 
 for(int x:A)
 {
 System.out.println(x); 
 }
 
 } 
}

//-------

class test 
{ 
static void change(int y[],int index,int value)    // we can change formal parameter variable name vs actual parameter variable name there is no problm,
 { 
 y[index]=value; 
 } 
 public static void main(String args[]) 
 { 
 int A[]={2,4,6,8,10}; 
 change(A,2,270); 
 change(A,1,260);
 change(A,3,90);
// change(A,9,270);    // Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 9 out of bounds for length 5
 for(int x:A)
 {
 System.out.println(x); 
 }
 
 } 
}




//-------

class test 
{ 
static void change(int y[],int index,int value)   
 { 
 y[index]=value; 
 } 
 
 static void  change2(int x,int value)
 {
 	x=value; 
 }
 
 public static void main(String args[]) 
 { 
 int A[]={2,4,6,8,10}; 
 change(A,2,270); 
 for(int x:A)
 {
 System.out.println(x); 
 }
 
 int x=35;
 change2(x,457);      // here x & 457 values are passed to called method & its changing the value of x in formal parameter but not in actual parameter is not modified.
 System.out.println("value of primitive value is "+x);
 
 } 
}

// but in case of array actual parameter values are also modifying. So this is the difference in java, when we pass primitives they pass like values, formal parameters was changed but not in actual parameters was changed. 
// when we are passing an object as a parameter to a method then its reference is passed , ( the array whoz reference is A(actual/calling parameters) is holding this array, in called function also formal parameter is holding the same array reference , it will not create a new object of array 






//============================



A method can	have	its	object	as	the	return	type.	

Parameter passing in java. 
➢ Whoever	is	calling	a	method	is	called	as	a	caller	or	a	method	call.	
➢ The	method	which	is	called	by	a	caller	is	known	as	called	method.	
➢ The	parameters/arguments	passed	in	calling	method	are	called	as	
actual	parameters.	
➢ And	the	parameters	of	a	called	method	are	called	as	formal	
parameters.	
➢ Formal	parameters	are	nothing	but	input	into	a	method	where	the	
return	type	is	known	as	output	to	a	method.	
➢ The	contents	of	actual	parameters	are	copied	in	formal	parameters	is	
the	only	method	of	parameter	passing	in	java.	
➢ Passing	of	objects	also	follow	the	same	method.	
➢ Parameter	passing	for	primitive	datatypes	the	values	are	copied	in	
formal	parameters,	whereas	in	parameter	passing	of	objects	the	
reference	of	the	object	id	is	copied	in	formal	parameters.	
➢ In	short	the	primitive	datatypes	are	passed	by	value	and	the	objects	
are	passed	by	reference.	


Example	program:

class test 
{ 
 int add(int x, int y)    //x,y are formal parameters  | int add() ---> called method
 { 
 int z; 
 z=x+y; 
 return z; 
 } 
 public static void main(String args[]) 
 { 
 int a=10,b=5,c; 
 c=add(a,b);            //a,b are actual parameters  | here add(); --> method call (or) calling method
 System.out.prinlt(c); 
 } 
}


//-------------

class test 
{ 
static void change(String n)   
 { 
System.out.println("data is printing"+n);
 } 
 
 
 public static void main(String args[]) 
 { 
 
String name="karthikeya";
change(name);

 } 
}


// while passing an String Object the variable - name & n is having/holding the same reference(reference is copied into n variable of name variable). Here contents are copied.

// primitives are passed by values, objects are passed by reference.
// java doesnt have call by value and call by reference.











//====================================================



      
RECURSION 
➢ A	recursive	method	is	the	one	which	will	call	itself.	
➢ When	the	recursive	function	can	not	call	itself	further	because	of	the	
base	condition	it	will	return	back	along	the	same	path.	
➢ Not	to	make	the	program	lengthy	loops	are	used	instead	of	recursive	
functions.	
➢ The	recursions	are	used	in	problem	solving.





writing methods:

package methodpractice;


public class MethodPractice {
    
    /*static int max(int x,int y)
    {
        if(x>y)
            return x;
        else 
            return y;
    }*/
    
    static void inc(int x)
    {
        x++;
        System.out.println(x);
    }
    
    public static void main(String[] args) {
    
        /*int a=10,b=15;
        //System.out.println(max(a,b));
        
        MethodPractice mp=new MethodPractice();
        System.out.println(mp.max(a,b));*/
        
        int a=10,b=15;
        inc(a);
        System.out.println(a);
        
        
    }
    }
    



=====================================

practicing Object Passing:


package methodpractice1;

public class MethodPractice1 {

    static void change(int A[],int index,int value)
    {
        A[index]=value;
    }
    
    static void change2(int x,int value)
    {
        x=value;
    }
    
    public static void main(String[] args) {
        int A[]={2,4,6,8,10};
        
        change(A,2,20);
        
        for(int x:A)
        {
            System.out.println(x);
        }
        
        int x=10;
        
        change2(x,20);
        
        System.out.println("Value of primitive"+x);
    }
    
}



=====================================

find a prime number

package scmethod1;

public class SCMethod1 
{
    
          
    public static void main(String[] args) 
    {
        SCMethod1 x=new SCMethod1();
        System.out.println(x.gcd(35,56));
	
	// System.out.println(isPrime(91));  // for prime num or not
    
        
    } 
        
        
    static boolean isPrime(int n)
    {
        for(int i=2;i<n/2;i++)
        {
            if(n%i==0)
                return false;
        }
        return true;
        
    }

}


// ======================================================

//GCD - Greatest Common Divisors,  & its also called as highest common factor for both the numbers...
//example 1 - 25(1,5,25) Vs 15(1,3,5,15)  ---> here 5 is the highest/greatest common factor

//example 2- 35(1,5,7,35)  Vs 56(1,2,4,7,8)  ---> here 7 is the highest common divisor.


public class test
{
     int gcd(int m,int n)
    {
        while(m!=n)
        {
            if(m>n)m=m-n;
            else n=n-m;
        }
        return m;
    }
     
    public static void main(String[] args) 
    {
        test x=new test();
        System.out.println(x.gcd(35,56));
	
  
    } 
 
}




=======================================================

Method overloading: 
➢ Method	overloading	means	writing	more	than	one	method	having	
same	names	but	different	parameter	list	or	data	types.

➢ Compiler will	call	the	corresponding	method	depending	upon	the	
parameter list.	

// practicing method overloading

class Overloading
{
    public int max(int a,int b)
    {
        return a>b?a:b;
    }
    
     public float max(float a,float b,float c)
    {
        if(a>b && a>c) 
		return a;
        else if(b>c) 
		return b;
	else
        return c;
    }
}		
    public double max(double a,double b,double c)
    {
        if(a>b && a>c) 
		return a;
        else if(b>c) 
		return b;
	else
        return c;
    }
}

public class test
{
    public static void main(String[] args) 
    {
        Overloading t=new Overloading();

        System.out.println(t.max(10,5));
        System.out.println(t.max(10.12345678,15.123456789,5.567878787));  // no.of parameters must be different  (or) type of parameters must be different (we are sending 3 values)
        System.out.println(t.max(10f,15.123456789f,5f));             // here type of parameters are different (we are sending 3 values)


    }
    
}



//----------------------------------------------------------------------

public class test
{
   	
	static int max(byte x,byte y)
	{
		System.out.println(" iam taking int type");
		return x>y?x:y;
	}
					
    
     static float max(float a,float b)  // if integer type is not available it goes to higher ones.
    {
	System.out.println(" iam taking float type");
        if(a>b) 
		return a;
		
        else
	      return b;
	
    }

    public static void main(String[] args) 
    {
       

	System.out.println(max(55,77));  // integer is compatible of float but not double
      	
	int a=45,b=456;
	System.out.println(max(a,b));

	byte i=34,j=23;
	System.out.println(max(i,j));  //byte works only for byte type of data


		

    }
    
}


//--------------------------------------------------


// Error - method having with same signature is error in method overloading...

public class test
{
   	
	static int max(int x,int y)
	{
		System.out.println(" iam taking int type");
		return x>y?x:y;
	}
	
	static float max(int x,int y)         // return type doesnt matters, if method signature is same it rises error
	{
		System.out.println(" iam taking int type");
		return x>y?x:y;
	}				
   

    public static void main(String[] args) 
    {
   	int i=34,j=23;
	System.out.println(max(i,j));  
    }
    
}


========================================
// overload method to calculate area
// overload method to reverse a int to array
// overlaod method to validate name and age

//overload validate methods



package scmethod2;

public class test
{
    
    
 static   boolean validate(String name)
    {
        return name.matches("[a-zA-Z\\s]+");  // + -> atleast one alphabet must be there,
    }
    
    
   static boolean validate(int age)
    {
        return age>=3 && age<=15;
    }
    
    
   static int reverse(int n)
    {
        int rev=0;
        
        while(n>0)
        {
            rev=rev*10+n%10;
            n=n/10;
        }
        return rev;
    }
    
     
    public static void main(String[] args) 
    {
        
	System.out.println(area(4));
	System.out.println(area(2,4));
	System.out.println(reverse(4567));

	

	System.out.println("validating age"+validate(45));
	System.out.println("validating age"+validate("karthikeya"));


    } 
    
      
    static double area(double radius)
    {
        return Math.PI*radius*radius;
    }
    
    static double area(double length,double breadth)
    {
        return length*breadth;
    }
    
      
}

    
    
//===================================================

Ex:

max();
max(1);
max(2,4,5);
max(7,8,9,7);  

for every calling method we have to write called methods, (with different number of arguments) every time it takes more time more code of lines, so for reducing we use variable arguments

Variable arguments: 
➢ It	is	nothing	but	writing	a	single	method	which	can	run	for	number	of	
parameters	of	same	data	types.	
➢ writing only one method - working for all parameters  i.e., variable arguments (not fixed no.of arguments)

➢ For	example	–	void	show(int	…x)		
Where	…	represents	the	variable	arguments.	
➢ It	is	similar	to	ellipsis	in	c/c++.	
➢ The	parameters	passed	are	converted	into	an	array.	
➢ The	parameters	can	be	directly	passed	using	an	anonymous	array

➢ Variable	argument	should	always	be	the	last	parameter.	
➢ Printf	is	based	on	variable	arguments	in	version	1.7	java.	


Example - 1:

public class test
{
   
 static void show(int ...A) //...A it suports variable arguments and also array arguments also                   // show(int A[])  ---> it wont work 
    {
     for(int x:A)
	{

	System.out.println(x);
	}
    }
    
    public static void main(String[] args) 
    {
        
	show();
	show(4);
	show(4,56 );
	show(4,56,67,7);

	show(new int[]{1,3,6,67,8,6899,67});   // we can pass integer type of array
      
    }

}



//---------


// variable arguments as a strings

public class test
{
   
 static void showList(String ...A)
    {
     for(int i=0;i<A.length;i++)
	{

	System.out.println(i+1+"."+A[i]);
	}
    }
    
    public static void main(String[] args) 
    {
        
	showList("raja","rani","navya","karthikeya");
    }

}

//----------------------------

public class test
{
   
 static void showList(int start,String ...A)
    {
     for(int i=0;i<A.length;i++)
	{

	System.out.println(start+"."+A[i]);
	start++;
	}
    }
    
    public static void main(String[] args) 
    {
        
	showList(5,"raja","rani","navya","karthikeya");  // we can start with our own index
    }

}

/------------------------

//error: varargs parameter must be the last parameter

public class test
{
   
 static void showList(String ...A,int start)
    {
     for(int i=0;i<A.length;i++)
	{

	System.out.println(start+"."+A[i]);
	start++;
	}
    }
    
    public static void main(String[] args) 
    {
        
	showList("raja","rani","navya","karthikeya",5);  // variable argument must be last of the argument
    }

}


//-------------------------------------------

// In public static void main() we can keep ... dots also it allows any no.of arguments

public class test
{
   
 static void showList(int start,String ...A)
    {
     for(int i=0;i<A.length;i++)
	{

	System.out.println(start+"."+A[i]);
	start++;
	}
    }
    
    public static void main(String ...args) // in psvm we have to write 3 dots also instead of []
    {
        
	showList(6,"raja","rani","navya","karthikeya");  // variable argument must be last of the argument
    }

}






//-------------------------------------------

//practicing  - variable arguments


package scmethod3;

public class SCMethod3 
{
    static int max(int ...A)
    {
        if(A.length==0)return Integer.MIN_VALUE;
        int max=A[0];
        for(int i=1;i<A.length;i++)
            if(A[i]>max)max=A[i];
        
        return max;
        
    }
    
    static int sum(int ...A)
    {
        int s=0;
        for(int i=0;i<A.length;i++)
            s+=A[i];
        
        return s;
    }
    
    static double sum(double ...P)
    {
        double sum=0;
        
        for(int i=0;i<P.length;i++)
            sum+=P[i];
        
        if(sum<500) return sum*0.10;
        else if(sum>=500 && sum<1000) return sum*0.15;
        else return sum*0.20;
        
    }
    
    
    public static void main(String[] args) 
    {
        System.out.println(max());
        System.out.println(max(10));
        System.out.println(max(10,20));
        System.out.println(max(10,20,30));

    }    
}


//================================================

// calculate sum , discount , maximum nos of elements   ---> student challenge...


package scmethod3;

public class SCMethod3 
{
    static int max(int ...A)
    {
        if(A.length==0)return Integer.MIN_VALUE;
        int max=A[0];
        for(int i=1;i<A.length;i++)
            if(A[i]>max)max=A[i];
        
        return max;
        
    }
    
    static int sum(int ...A)
    {
        int s=0;
        for(int i=0;i<A.length;i++)
            s+=A[i];
        
        return s;
    }
    
    static double sum(double ...P)
    {
        double sum=0;
        
        for(int i=0;i<P.length;i++)
            sum+=P[i];
        
        if(sum<500) return sum*0.10;
        else if(sum>=500 && sum<1000) return sum*0.15;
        else return sum*0.20;
        
    }
    
    
    public static void main(String[] args) 
    {
        System.out.println(max());
        System.out.println(max(10));
        System.out.println(max(10,20));
        System.out.println(max(10,20,30));

    }    
}



//================================================

Command line arguments: 
➢ Java	programs	can	utilize	command	line	arguments.	
➢ Dos	Iile	is	used	for	command	line	arguments.	
➢ There	are	different	commands	like.	
• cls:	to	clear	the	screen.	
• dir	:	to	display	the	contents	of	the	disk.	
• cd	windows	:	to	change	the	directory.	
➢ C:	\Windows>	dir	v*.*	(which starts with letter v)  (dir - is the command(list of directories of the files) , v*.* - is the arguments(only shows which starts with v)
• the	above	is	command	line	in	which	
			Dir	is	command	and	v*.*	is	an	argument

-> To create a notepad file/java file with file name in cmd open cmd/dos - ex: -> c:\Users\Karthik>notepad filename.java (now javanotepadfile will be created)



// Example program for command line arguments
Step  -1: Open Cmd
C:\Users\karthik\Desktop\sandeep>notepad CommandTest.java  -> notepad file will be created with CommandTest.java file

Step -2: Write the program

class CommandTest
{
public static void main(String args[])  // String args[] means what ever the arguments it takes String Type only, even if we pas numbers also it takes like as Strings only.
{
	for(String s:args)
	{

	System.out.println(s);

	}
}
}

step - 3 : go to cmd again execute now ->

C:\Users\karthik\Desktop\sandeep>javac CommandTest.java

C:\Users\karthik\Desktop\sandeep>java CommandTest this is a commandline arguments in java

output will be like this:
this
is
a
commandline
arguments
in
java

/-----------------------------------------------------

// we can use counter controlled loop or for each loop

class CommandTest
{
public static void main(String args[])   
{
	for(int i=0;i<args.length;i++)
	{

	System.out.println(args[i]);

	}
}
}


C:\Users\karthik\Desktop\sandeep>java CommandTest 34 567 56 3245 3

It takes numbers also like as an string arguments


//---------------------------------------------------------------

// program - sum of numbers from command line arguments


package mysum;

public class MySum {

    public static void main(String[] args) {
        double s=0;
        for(String x:args)
        {
            if(x.matches("[0-9\\.]+"))                //regular expressions - [0-9] nos are allowed, \\. -> dot is also allowed,---> [0-9\\.] ---> when ever it matches only add it otherwise it neglect other characters / special charcters...
                s=s+Double.parseDouble(x); // converting to Double Type
        }
        System.out.println("Sum is "+s);
    }
    
}

//================================================



// program -Recursion / recursive methods 

/*
recursive method is a one which will call itself. A method calling itself is called as recursive methods.
usually we dont write recursive methods in java.But java supports recursive methods.


*/



package recursion;

public class Recursion 
{
    static void fun(int n)
    {
        if(n>0)
        {
            fun(n-1);

            System.out.println(n);
        }
    }

    public static void main(String[] args) 
    {
        fun(3);
    }
}






====================================


package first;

//1 Mthod overloading -  In Method overloading inheritance is not required/involved...
//2. Method having the same name with different arguments is called method Overloading...
//3. It Occurs in One/Same Class

/*
class MethodOverloading 
{
public static void main(String[] args)
{
float g;
	
	
	mul(1,2,3,4);
	mul(1,2,3);
	mul(1,2);
	mul(1);
	
}
protected static void mul(int i,int j,int k,int f)
{
	System.out.println(i*j*k*f);
}

public static void mul(int i,int j,int k)
{
	System.out.println(i*j*k);
}

 public static int mul(int i,int j)
{
	System.out.println(i*j);
	
}

public static void mul(int i)
{
	System.out.println(i);
}

}


*/


/*

//1. Inheritance is involved in Mthod OverRiding...
//2. Method of SubClass having Same name as that of SuperClass, Overrides the methods of SuperClass then its called MethodOverRiding.
//3. It Occurs between Two Classes, i.e., Super class and a Sub class...
 
public class MethodOverloading {

	public static void main(String args[])
	{
		
		Two t=new Two();
		t.canBeChanged();
		
	}
}


class One
{
	 void canBeChanged(int i,int j)
	{
		System.out.println("This is parent One class, canBeChanged method ");
	}
}

class Two extends One
{
	void kintu()
	{
		System.out.println("Normal method");
	}
	
	 void  canBeChanged()
	{
		System.out.println("This is Child class Now its changed, Its overriding the method");
		
		
	}
}

*/


/*
//4.Any Accessspecifier can be changed in MethodOverLoading

class MethodOverloading 
{
public static void main(String[] args)
{

	
	
	mul(1,2,3,4);
	mul(1,2,3);
	mul(1,2);
	mul(1);
	
}
public static void mul(int i,int j,int k,int f)
{
	System.out.println(i*j*k*f);
}

private static void mul(int i,int j,int k)
{
	System.out.println(i*j*k);
}

  static void mul(int i,int j)
{
	System.out.println(i*j);
	
}

protected static void mul(int i)
{
	System.out.println(i);
}

}

*/



//4. Any Accesspecifier can be changed but according to this rule we can follow private < default < protected < public
/*
public class MethodOverloading {

	public static void main(String args[])
	{
		
		Two t=new Two();
		t.canBeChanged();
		
	}
}


 class One
{
	 protected  void canBeChanged()  //case -1:default accesspecifier is higher capacity than protected, so we wont get error
	{
		System.out.println("This is parent One class, canBeChanged method ");
	}
}

class Two extends One
{
	void kintu()
	{
		System.out.println("Normal method");
	}
	
		 void  canBeChanged()   //case -1:default accesspecifier is higher capacity than protected, so we wont get error
	{
		System.out.println("This is Child class Now its changed, Its overriding the method");
		
		
	}
}


//case -2: Keep for super class - protected and child class is default we will get error 

// Its According to the Priority -  private < default < protected < public


*/



/*

//5. Static methods can be Overloaded which means a class can have more than one static method of same name...

class MethodOverloading 
{
public static void main(String[] args)
{

	
	
	mul(1,2,3,4);
	mul(1,2,3);
	mul(1,2);
	mul(1);
	
}
public static void mul(int i,int j,int k,int f)
{
	System.out.println(i*j*k*f);
}

private static void mul(int i,int j,int k)
{
	System.out.println(i*j*k);
}

  static void mul(int i,int j)
{
	System.out.println(i*j);
	
}

protected static void mul(int i)
{
	System.out.println(i);
}

}

*/


/*
//5. In Method OverRiding - parent Class (static / non-static) ---> we cant modify to (non-static / static) methods...
//Static methods cannot be Overriden, even if you declare a same static method in child class it has nothing to do with the same method of parent class.


public class MethodOverloading {

	public static void main(String args[])
	{
		
		Two t=new Two();
		t.canBeChanged();
		
	}
}


class One
{
	   void canBeChanged()  
	{
		System.out.println("This is parent One class, canBeChanged method ");
	}
}

class Two extends One
{
	void kintu()
	{
		System.out.println("Normal method");
	}
	
	static	 void  canBeChanged()   //We cannot OverRide a non-static method with Static method... (or) static to--> non-static
	{
		System.out.println("This is Child class Now its changed, Its overriding the method");
		
		
	}
}


*/








/*
//6 - Mthod overloading

//6. ReturnType May or May Not be Changed in Method OverLoading

class MethodOverloading 
{
public static void main(String[] args)
{
float g;
	
	
	mul(1,2,3,4);
	mul(1,2,3);
	g=mul(1,2);
	System.out.println("g value is "+g);   //Here value we get is float value//return type may or may not be changed no problem
	mul(1);
	
}
protected static void mul(int i,int j,int k,int f)
{
	System.out.println(i*j*k*f);
}

public static void mul(int i,int j,int k)
{
	System.out.println(i*j*k);
}

 static int mul(int i,int j)   //return type is int
{
	int k=i*j;
	return k; 
}

public static void mul(int i)
{
	System.out.println(i);
}

}

*/


/*

//6. Return Type must be same in super class method and sub class method - Method OverRiding

public class MethodOverloading {

	public static void main(String args[])
	{
		int o;
		Two t=new Two();
		o=t.canBeChanged(10,20);
		System.out.println("o value is "+o);
	}
}


class One
{
	 void canBeChanged(int i,int j)
	{
		System.out.println("This is parent One class, canBeChanged method ");
		return 0;
	}
}

class Two extends One
{
	void kintu()
	{
		System.out.println("Normal method");
	}
	
	 int  canBeChanged(int i,int j)
	{
		System.out.println("This is Child class Now its changed, Its overriding the method");
		int l=i*j;
		return l;
	}
}

*/





























